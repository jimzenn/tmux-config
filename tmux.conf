# cat << EOF > /dev/null

# General {{{

# Set default terminal to tmux-256color for better color support
set -g default-terminal "tmux-256color"

# Enable xterm keys for better key-mapping compatibility
setw -g xterm-keys on

# Set the escape delay time to 0
set -s escape-time 0

# Set the time in milliseconds for which a key press is considered a repeat
set -sg repeat-time 600

# Enable focus event tracking
set -s focus-events on

# Unbind the default prefix key (Control-B)
unbind C-b

# Set the primary prefix key to Control-A
set -g prefix C-a

# Increase scrollback history to 50000
set -g history-limit 50000

# Shortcut to edit tmux configuration and reload it
bind e new-window -n "~/.tmux.conf.local" "sh -c '\${EDITOR:-vim} ~/.tmux.conf.local && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\"'"

# Shortcut to quickly reload the tmux configuration
bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'

# }}}

# Display {{{

# Start window and pane numbering at 1 instead of default 0
set -g base-index 1
setw -g pane-base-index 1

# Enable automatic window renaming based on running application
setw -g automatic-rename on

# Enable renumbering of windows when a window is closed
set -g renumber-windows on

# Allow tmux to set the terminal window title
set -g set-titles on

# Set the time panes are displayed after the display-panes command
set -g display-panes-time 800

# Set duration for displaying messages
set -g display-time 4000

# Set the status line update interval in seconds
set -g status-interval 5

# Clear history with Control-L
bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

# Monitor for activity in windows, displaying a visual indicator in the status line
set -g monitor-activity on

# Disable visual bell on activity
set -g visual-activity off

# }}}

# Navigation {{{

# Shortcut to create a new session
bind C-c new-session

# Shortcut to find and switch to a session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# Maximize current pane (custom script required)
bind + run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# Window navigation shortcuts
unbind n
unbind p

# }}}

# Copy mode {{{

bind Enter copy-mode # enter copy mode

# Begin selection in VI copy mode
bind -T copy-mode-vi v send -X begin-selection

# Toggle rectangle selection in VI copy mode
bind -T copy-mode-vi C-v send -X rectangle-toggle

# Copy the selection and cancel in VI copy mode
bind -T copy-mode-vi y send -X copy-selection-and-cancel

# Cancel current operation in VI copy mode
bind -T copy-mode-vi Escape send -X cancel

# Move to the start of the line in VI copy mode
bind -T copy-mode-vi H send -X start-of-line

# Move to the end of the line in VI copy mode
bind -T copy-mode-vi L send -X end-of-line

# Copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'

# Copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'

# Copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'

# }}}

# Buffers {{{

# List paste buffers
bind b list-buffers

# Paste from the top paste buffer
bind p paste-buffer

# Choose which buffer to paste from
bind P choose-buffer

# }}}

# User overrides {{{

if '[ -f ~/.tmux.conf.local ]' 'source ~/.tmux.conf.local'

# }}}

# 8< {{{

run 'cut -c3- ~/.tmux.conf | sh -s _apply_configuration'

# }}}

# TMUX plugin manager {{{
# examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-pain-control'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.config/tmux/plugins/tpm/tpm'

# }}}

# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# unset GREP_OPTIONS
# export LC_NUMERIC=C
#
# if ! printf '' | sed -E 's///' 2>/dev/null; then
#   if printf '' | sed -r 's///' 2>/dev/null; then
#     sed () {
#       n=$#; while [ "$n" -gt 0 ]; do arg=$1; shift; case $arg in -E*) arg=-r${arg#-E};; esac; set -- "$@" "$arg"; n=$(( n - 1 )); done
#       command sed "$@"
#     }
#   fi
# fi
#
# __newline='
# '
#
# _is_enabled() {
#   ( ([ x"$1" = x"enabled" ] || [ x"$1" = x"true" ] || [ x"$1" = x"yes" ] || [ x"$1" = x"1" ]) && return 0 ) || return 1
# }
#
# _decode_unicode_escapes() {
#   printf '%s' "$*" | perl -CS -pe 's/(\\u([0-9A-Fa-f]{1,4})|\\U([0-9A-Fa-f]{1,8}))/chr(hex($2.$3))/eg' 2>/dev/null
# }
#
# _maximize_pane() {
#   current_session=${1:-$(tmux display -p '#{session_name}')}
#   current_pane=${2:-$(tmux display -p '#{pane_id}')}
#
#   dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -E -o '^1 %.+maximized.+$' || true)
#   restore=$(echo "$dead_panes" | sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p" -e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p" )
#
#   if [ -z "$restore" ]; then
#     [ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1 ] && tmux display "Can't maximize with only one pane" && return
#     window=$(tmux new-window -t "$current_session:" -P "exec maximized... 2> /dev/null & tmux setw -t \"$current_session:\" remain-on-exit on; printf \"Pane has been maximized, press <prefix>+ to restore. %s\" '$current_pane'")
#     window=${window%.*}
#
#     retry=1000
#     while [ x"$(tmux list-panes -t "$window" -F '#{session_name}:#{window_index} #{pane_dead}' 2>/dev/null)" != x"$window 1" ] && [ "$retry" -ne 0 ]; do
#       sleep 0.1
#       retry=$((retry - 1))
#     done
#     if [ "$retry" -eq 0 ]; then
#       tmux display 'Unable to maximize pane'
#     fi
#
#     new_pane=$(tmux display -t "$window" -p '#{pane_id}')
#     tmux setw -t "$window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
#   else
#     $restore || tmux kill-pane
#   fi
# }
#
# _tty_info() {
#   tty="${1##/dev/}"
#   uname -s | grep -q "CYGWIN" && cygwin=true
#
#   if [ x"$cygwin" = x"true" ]; then
#     ps -af | tail -n +2 | awk -v tty="$tty" '
#       ((/ssh/ && !/-W/) || !/ssh/) && $4 == tty {
#         user[$2] = $1; parent[$2] = $3; child[$3] = $2
#       }
#       END {
#         for (i in parent)
#         {
#           j = i
#           while (parent[j])
#             j = parent[j]
#
#           if (!(i in child) && j != 1)
#           {
#             file = "/proc/" i "/cmdline"; getline command < file; close(file)
#             gsub(/\0/, " ", command)
#             print i, user[i], command
#             exit
#           }
#         }
#       }
#     '
#   else
#     ps -t "$tty" -o user=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -o pid= -o ppid= -o command= | awk '
#       NR > 1 && ((/ssh/ && !/-W/) || !/ssh/) {
#         user[$2] = $1; parent[$2] = $3; child[$3] = $2; for (i = 4 ; i <= NF; ++i) command[$2] = i > 4 ? command[$2] FS $i : $i
#       }
#       END {
#         for (i in parent)
#         {
#           j = i
#           while (parent[j])
#             j = parent[j]
#
#           if (!(i in child) && j != 1)
#           {
#             print i, user[i], command[i]
#             exit
#           }
#         }
#       }
#     '
#   fi
# }
#
# _ssh_or_mosh_args() {
#   args=$(printf '%s' "$1" | awk '/ssh/ && !/vagrant ssh/ && !/autossh/ && !/-W/ { $1=""; print $0; exit }')
#   if [ -z "$args" ]; then
#     args=$(printf '%s' "$1" | grep 'mosh-client' | sed -E -e 's/.*mosh-client -# (.*)\|.*$/\1/' -e 's/-[^ ]*//g' -e 's/\d:\d//g')
#   fi
#
#  printf '%s' "$args"
# }
#
# _username() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   ssh_only=$2
#
#   tty_info=$(_tty_info "$tty")
#   command=$(printf '%s' "$tty_info" | cut -d' ' -f3-)
#
#   ssh_or_mosh_args=$(_ssh_or_mosh_args "$command")
#   if [ -n "$ssh_or_mosh_args" ]; then
#     # shellcheck disable=SC2086
#     username=$(ssh -G $ssh_or_mosh_args 2>/dev/null | awk 'NR > 2 { exit } ; /^user / { print $2 }')
#     # shellcheck disable=SC2086
#     [ -z "$username" ] && username=$(ssh -T -o ControlPath=none -o ProxyCommand="sh -c 'echo %%username%% %r >&2'" $ssh_or_mosh_args 2>&1 | awk '/^%username% / { print $2; exit }')
#   else
#     if ! _is_enabled "$ssh_only"; then
#       username=$(printf '%s' "$tty_info" | cut -d' ' -f2)
#     fi
#   fi
#
#   printf '%s' "$username"
# }
#
# _hostname() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   ssh_only=$2
#
#   tty_info=$(_tty_info "$tty")
#   command=$(printf '%s' "$tty_info" | cut -d' ' -f3-)
#
#   ssh_or_mosh_args=$(_ssh_or_mosh_args "$command")
#   if [ -n "$ssh_or_mosh_args" ]; then
#     # shellcheck disable=SC2086
#     hostname=$(ssh -G $ssh_or_mosh_args 2>/dev/null | awk 'NR > 2 { exit } ; /^hostname / { print $2 }')
#     # shellcheck disable=SC2086
#     [ -z "$hostname" ] && hostname=$(ssh -T -o ControlPath=none -o ProxyCommand="sh -c 'echo %%hostname%% %h >&2'" $ssh_or_mosh_args 2>&1 | awk '/^%hostname% / { print $2; exit }')
#     #shellcheck disable=SC1004
#     hostname=$(echo "$hostname" | awk '\
#     { \
#       if ($1~/^[0-9.:]+$/) \
#         print $1; \
#       else \
#         split($1, a, ".") ; print a[1] \
#     }')
#   else
#     if ! _is_enabled "$ssh_only"; then
#       hostname=$(command hostname -s)
#     fi
#   fi
#
#   printf '%s' "$hostname"
# }
#
# _root() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   username=$(_username "$tty" false)
#
#   if [ x"$username" = x"root" ]; then
#     tmux show -gqv '@root'
#   else
#     echo ""
#   fi
# }
#
# _loadavg() {
#   case $(uname -s) in
#     *Darwin*)
#       tmux set -g @loadavg "$(sysctl -q -n vm.loadavg | cut -d' ' -f2)"
#       ;;
#     *Linux*)
#       tmux set -g @loadavg "$(cut -d' ' -f1 < /proc/loadavg)"
#       ;;
#     *OpenBSD*)
#       tmux set -g @loadavg "$(sysctl -q -n vm.loadavg | cut -d' ' -f1)"
#       ;;
#   esac
# }
#
# _apply_overrides() {
#   tmux_conf_theme_24b_colour=${tmux_conf_theme_24b_colour:-false}
#   if _is_enabled "$tmux_conf_theme_24b_colour"; then
#   case "$TERM" in
#     screen-*|tmux-*)
#       ;;
#     *)
#       tmux set-option -ga terminal-overrides ",*256col*:Tc"
#       ;;
#   esac
#   fi
# }
#
# _apply_bindings() {
#   cfg=$(mktemp) && trap 'rm -f $cfg*' EXIT
#
#   tmux list-keys | grep -vF 'tmux.conf.local' | grep -E '(new-window|split(-|_)window|new-session|copy-selection|copy-pipe)' > "$cfg"
#
#   # tmux 3.0 doesn't include 02254d1e5c881be95fd2fc37b4c4209640b6b266 and the
#   # output of list-keys can be truncated
#   perl -p -i -e "s/'#\{\?window_zoomed_flag,Unzoom,Zoom\}' 'z' \{resize-pane -$/'#{?window_zoomed_flag,Unzoom,Zoom}' 'z' {resize-pane -Z}\"/g" "$cfg"
#
#   tmux_conf_new_window_retain_current_path=${tmux_conf_new_window_retain_current_path:-false}
#   if _is_enabled "$tmux_conf_new_window_retain_current_path"; then
#     perl -p -i \
#       -e "s/\b(new-window)\b(?!\s+-)/{$&}/g if /\bdisplay-menu\b/" \
#       -e ';' \
#       -e "s/\bnew-window\b(?!([^;}\n\"]*?)(?:\s+-c\s+(\\\?\"?|'?)#\{pane_current_path\}\2))/new-window -c '#{pane_current_path}'/g" \
#       "$cfg"
#   else
#     perl -p -i -e "s/\bnew-window\b([^;}\n\"]*?)(?:\s+-c\s+(\\\?\"?|'?)#\{pane_current_path\}\2)/new-window\1/g" "$cfg"
#   fi
#
#   tmux_conf_new_pane_retain_current_path=${tmux_conf_new_pane_retain_current_path:-false}
#   if _is_enabled "$tmux_conf_new_pane_retain_current_path"; then
#     perl -p -i -e "s/\bsplit-window\b(?!([^;}\n\"]*?)(?:\s+-c\s+(\\\?\"?|'?)#\{pane_current_path\}\2))/split-window -c '#{pane_current_path}'/g" "$cfg"
#   else
#     perl -p -i -e "s/\bsplit-window\b([^;}\n\"]*?)(?:\s+-c\s+(\\\?\"?|'?)#\{pane_current_path\}\2)/split-window\1/g" "$cfg"
#   fi
#
#   tmux_conf_new_session_prompt=${tmux_conf_new_session_prompt:-false}
#   if _is_enabled "$tmux_conf_new_session_prompt"; then
#     perl -p -i \
#       -e "s/(?<!command-prompt -p )\b(new-session)\b(?!\s+-)/{$&}/g if /\bdisplay-menu\b/" \
#       -e ';' \
#       -e "s/(?<!\bcommand-prompt -p )\bnew-session\b(?! -s)/command-prompt -p new-session 'new-session -s \"%%\"'/g" \
#       "$cfg"
#   else
#     perl -p -i -e "s/\bcommand-prompt\s+-p\s+new-session\s+'new-session\s+-s\s+\"%%\"'/new-session/g" "$cfg"
#   fi
#
#   tmux_conf_copy_to_os_clipboard=${tmux_conf_copy_to_os_clipboard:-false}
#   command -v pbcopy > /dev/null 2>&1 && command='pbcopy'
#   command -v reattach-to-user-namespace > /dev/null 2>&1 && command='reattach-to-user-namespace pbcopy'
#   command -v xsel > /dev/null 2>&1 && command='xsel -i -b'
#   ! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1 && command='xclip -i -selection clipboard > \/dev\/null 2>\&1'
#   command -v clip.exe > /dev/null 2>&1 && command='clip\.exe'
#   [ -c /dev/clipboard ] && command='cat > \/dev\/clipboard'
#
#   if [ -n "$command" ]; then
#     if _is_enabled "$tmux_conf_copy_to_os_clipboard"; then
#       perl -p -i -e "s/\bcopy-selection(-and-cancel)?\b/copy-pipe\1 '$command'/g" "$cfg"
#     else
#       perl -p -i -e "s/\bcopy-pipe(-and-cancel)?\b\s+(\"|')?$command\2/copy-selection\1/g" "$cfg"
#     fi
#   fi
#
#   # until tmux >= 3.0, output of tmux list-keys can't be consumed back by tmux source-file without applying some escapings
#   awk < "$cfg" \
#     '{i = $2 == "-T" ? 4 : 5; gsub(/^[;]$/, "\\\\&", $i); gsub(/^[$"#~]$/, "'"'"'&'"'"'", $i); gsub(/^['"'"']$/, "\"&\"", $i); print}' > "$cfg.in"
#
#   # ignore bindings with errors
#   if ! tmux source-file "$cfg.in"; then
#     verbose_flag=$(tmux source-file -v /dev/null 2> /dev/null && printf -- '-v' || true)
#     while ! out=$(tmux source-file "$verbose_flag" "$cfg.in"); do
#       line=$(printf "%s" "$out" | tail -1 | cut -d':' -f2)
#       perl -n -i -e "if ($. != $line) { print }" "$cfg.in"
#     done
#   fi
# }
#
# _apply_theme() {
#
#   # -- panes -------------------------------------------------------------
#
#   tmux_conf_theme_window_fg=${tmux_conf_theme_window_fg:-default}
#   tmux_conf_theme_window_bg=${tmux_conf_theme_window_bg:-default}
#   tmux_conf_theme_highlight_focused_pane=${tmux_conf_theme_highlight_focused_pane:-false}
#   tmux_conf_theme_focused_pane_fg=${tmux_conf_theme_focused_pane_fg:-'default'} # default
#   tmux_conf_theme_focused_pane_bg=${tmux_conf_theme_focused_pane_bg:-'#0087d7'} # light blue
#
#   # tmux 1.9 doesn't really like set -q
#   if tmux show -g -w | grep -q window-style; then
#     tmux setw -g window-style "fg=$tmux_conf_theme_window_fg,bg=$tmux_conf_theme_window_bg"
#
#     if _is_enabled "$tmux_conf_theme_highlight_focused_pane"; then
#       tmux setw -g window-active-style "fg=$tmux_conf_theme_focused_pane_fg,bg=$tmux_conf_theme_focused_pane_bg"
#     else
#       tmux setw -g window-active-style default
#     fi
#   fi
#
#   tmux_conf_theme_pane_border_style=${tmux_conf_theme_pane_border_style:-thin}
#   tmux_conf_theme_pane_border=${tmux_conf_theme_pane_border:-'#444444'}               # light gray
#   tmux_conf_theme_pane_active_border=${tmux_conf_theme_pane_active_border:-'#00afff'} # light blue
#   tmux_conf_theme_pane_border_fg=${tmux_conf_theme_pane_border_fg:-$tmux_conf_theme_pane_border}
#   tmux_conf_theme_pane_active_border_fg=${tmux_conf_theme_pane_active_border_fg:-$tmux_conf_theme_pane_active_border}
#   case "$tmux_conf_theme_pane_border_style" in
#     fat)
#       tmux_conf_theme_pane_border_bg=${tmux_conf_theme_pane_border_bg:-$tmux_conf_theme_pane_border_fg}
#       tmux_conf_theme_pane_active_border_bg=${tmux_conf_theme_pane_active_border_bg:-$tmux_conf_theme_pane_active_border_fg}
#       ;;
#     thin|*)
#       tmux_conf_theme_pane_border_bg=${tmux_conf_theme_pane_border_bg:-'default'}
#       tmux_conf_theme_pane_active_border_bg=${tmux_conf_theme_pane_active_border_bg:-'default'}
#       ;;
#   esac
#   tmux setw -g pane-border-style "fg=$tmux_conf_theme_pane_border_fg,bg=$tmux_conf_theme_pane_border_bg" \; set -g pane-active-border-style "fg=$tmux_conf_theme_pane_active_border_fg,bg=$tmux_conf_theme_pane_active_border_bg"
#
#   tmux_conf_theme_pane_indicator=${tmux_conf_theme_pane_indicator:-'#00afff'}               # light blue
#   tmux_conf_theme_pane_active_indicator=${tmux_conf_theme_pane_active_indicator:-'#00afff'} # light blue
#
#   tmux set -g display-panes-colour "$tmux_conf_theme_pane_indicator" \; set -g display-panes-active-colour "$tmux_conf_theme_pane_active_indicator"
#
#   # -- status line -------------------------------------------------------
#
#   tmux_conf_theme_left_separator_main=$(_decode_unicode_escapes "${tmux_conf_theme_left_separator_main-}")
#   tmux_conf_theme_left_separator_sub=$(_decode_unicode_escapes "${tmux_conf_theme_left_separator_sub-|}")
#   tmux_conf_theme_right_separator_main=$(_decode_unicode_escapes "${tmux_conf_theme_right_separator_main-}")
#   tmux_conf_theme_right_separator_sub=$(_decode_unicode_escapes "${tmux_conf_theme_right_separator_sub-|}")
#
#   tmux_conf_theme_message_fg=${tmux_conf_theme_message_fg:-'#000000'}   # black
#   tmux_conf_theme_message_bg=${tmux_conf_theme_message_bg:-'#ffff00'}   # yellow
#   tmux_conf_theme_message_attr=${tmux_conf_theme_message_attr:-'bold'}
#   tmux set -g message-style "fg=$tmux_conf_theme_message_fg,bg=$tmux_conf_theme_message_bg,$tmux_conf_theme_message_attr"
#
#   tmux_conf_theme_message_command_fg=${tmux_conf_theme_message_command_fg:-'#ffff00'} # yellow
#   tmux_conf_theme_message_command_bg=${tmux_conf_theme_message_command_bg:-'#000000'} # black
#   tmux_conf_theme_message_command_attr=${tmux_conf_theme_message_command_attr:-'bold'}
#   tmux set -g message-command-style "fg=$tmux_conf_theme_message_command_fg,bg=$tmux_conf_theme_message_command_bg,$tmux_conf_theme_message_command_attr"
#
#   tmux_conf_theme_mode_fg=${tmux_conf_theme_mode_fg:-'#000000'} # black
#   tmux_conf_theme_mode_bg=${tmux_conf_theme_mode_bg:-'#ffff00'} # yellow
#   tmux_conf_theme_mode_attr=${tmux_conf_theme_mode_attr:-'bold'}
#   tmux setw -g mode-style "fg=$tmux_conf_theme_mode_fg,bg=$tmux_conf_theme_mode_bg,$tmux_conf_theme_mode_attr"
#
#   tmux_conf_theme_status_fg=${tmux_conf_theme_status_fg:-'#8a8a8a'} # white
#   tmux_conf_theme_status_bg=${tmux_conf_theme_status_bg:-'#080808'} # dark gray
#   tmux_conf_theme_status_attr=${tmux_conf_theme_status_attr:-'none'}
#   tmux  set -g status-style "fg=$tmux_conf_theme_status_fg,bg=$tmux_conf_theme_status_bg,$tmux_conf_theme_status_attr"        \;\
#         set -g status-left-style "fg=$tmux_conf_theme_status_fg,bg=$tmux_conf_theme_status_bg,$tmux_conf_theme_status_attr"   \;\
#         set -g status-right-style "fg=$tmux_conf_theme_status_fg,bg=$tmux_conf_theme_status_bg,$tmux_conf_theme_status_attr"
#
#   tmux_conf_theme_terminal_title=${tmux_conf_theme_terminal_title:-'#h ❐ #S ● #I #W'}
#
#   tmux_conf_theme_terminal_title=$(echo "$tmux_conf_theme_terminal_title" | sed \
#     -e 's%#{username}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_tty} false #D)%g' \
#     -e 's%#{hostname}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_tty} false #D)%g' \
#     -e 's%#{username_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_tty} true #D)%g' \
#     -e 's%#{hostname_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_tty} true #D)%g')
#   tmux set -g set-titles-string "$(_decode_unicode_escapes "$tmux_conf_theme_terminal_title")"
#
#   tmux_conf_theme_window_status_fg=${tmux_conf_theme_window_status_fg:-'#8a8a8a'} # white
#   tmux_conf_theme_window_status_bg=${tmux_conf_theme_window_status_bg:-'#080808'} # dark gray
#   tmux_conf_theme_window_status_attr=${tmux_conf_theme_window_status_attr:-'none'}
#   tmux_conf_theme_window_status_format=${tmux_conf_theme_window_status_format:-'#I #W'}
#
#   tmux_conf_theme_window_status_current_fg=${tmux_conf_theme_window_status_current_fg:-'#000000'} # black
#   tmux_conf_theme_window_status_current_bg=${tmux_conf_theme_window_status_current_bg:-'#00afff'} # light blue
#   tmux_conf_theme_window_status_current_attr=${tmux_conf_theme_window_status_current_attr:-'bold'}
#   tmux_conf_theme_window_status_current_format=${tmux_conf_theme_window_status_current_format:-'#I #W'}
#   if [ x"$(tmux show -g -v status-justify)" = x"right" ]; then
#     tmux_conf_theme_window_status_current_format="#[fg=$tmux_conf_theme_window_status_current_bg,bg=$tmux_conf_theme_window_status_bg]$tmux_conf_theme_right_separator_main#[fg=$tmux_conf_theme_window_status_current_fg,bg=$tmux_conf_theme_window_status_current_bg,$tmux_conf_theme_window_status_current_attr] $tmux_conf_theme_window_status_current_format #[fg=$tmux_conf_theme_window_status_bg,bg=$tmux_conf_theme_window_status_current_bg,none]$tmux_conf_theme_right_separator_main"
#   else
#     tmux_conf_theme_window_status_current_format="#[fg=$tmux_conf_theme_window_status_bg,bg=$tmux_conf_theme_window_status_current_bg]$tmux_conf_theme_left_separator_main#[fg=$tmux_conf_theme_window_status_current_fg,bg=$tmux_conf_theme_window_status_current_bg,$tmux_conf_theme_window_status_current_attr] $tmux_conf_theme_window_status_current_format #[fg=$tmux_conf_theme_window_status_current_bg,bg=$tmux_conf_theme_status_bg,none]$tmux_conf_theme_left_separator_main"
#   fi
#
#   tmux_conf_theme_window_status_format=$(echo "$tmux_conf_theme_window_status_format" | sed \
#     -e 's%#{username}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_tty} false #D)%g' \
#     -e 's%#{hostname}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_tty} false #D)%g' \
#     -e 's%#{username_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_tty} true #D)%g' \
#     -e 's%#{hostname_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_tty} true #D)%g')
#
#   tmux_conf_theme_window_status_current_format=$(echo "$tmux_conf_theme_window_status_current_format" | sed \
#     -e 's%#{username}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_tty} false #D)%g' \
#     -e 's%#{hostname}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_tty} false #D)%g' \
#     -e 's%#{username_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_tty} true #D)%g' \
#     -e 's%#{hostname_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_tty} true #D)%g')
#
#   tmux  setw -g window-status-style "fg=$tmux_conf_theme_window_status_fg,bg=$tmux_conf_theme_window_status_bg,$tmux_conf_theme_window_status_attr" \;\
#         setw -g window-status-format "$(_decode_unicode_escapes "$tmux_conf_theme_window_status_format")" \;\
#         setw -g window-status-current-style "fg=$tmux_conf_theme_window_status_current_fg,bg=$tmux_conf_theme_window_status_current_bg,$tmux_conf_theme_window_status_current_attr" \;\
#         setw -g window-status-current-format "$(_decode_unicode_escapes "$tmux_conf_theme_window_status_current_format")"
#
#   tmux_conf_theme_window_status_activity_fg=${tmux_conf_theme_window_status_activity_fg:-'default'}
#   tmux_conf_theme_window_status_activity_bg=${tmux_conf_theme_window_status_activity_bg:-'default'}
#   tmux_conf_theme_window_status_activity_attr=${tmux_conf_theme_window_status_activity_attr:-'underscore'}
#   tmux setw -g window-status-activity-style "fg=$tmux_conf_theme_window_status_activity_fg,bg=$tmux_conf_theme_window_status_activity_bg,$tmux_conf_theme_window_status_activity_attr"
#
#   tmux_conf_theme_window_status_bell_fg=${tmux_conf_theme_window_status_bell_fg:-'#ffff00'} # yellow
#   tmux_conf_theme_window_status_bell_bg=${tmux_conf_theme_window_status_bell_bg:-'default'}
#   tmux_conf_theme_window_status_bell_attr=${tmux_conf_theme_window_status_bell_attr:-'blink,bold'}
#   tmux setw -g window-status-bell-style "fg=$tmux_conf_theme_window_status_bell_fg,bg=$tmux_conf_theme_window_status_bell_bg,$tmux_conf_theme_window_status_bell_attr"
#
#   tmux_conf_theme_window_status_last_fg=${tmux_conf_theme_window_status_last_fg:-'#00afff'} # light blue
#   tmux_conf_theme_window_status_last_bg=${tmux_conf_theme_window_status_last_bg:-'default'}
#   tmux_conf_theme_window_status_last_attr=${tmux_conf_theme_window_status_last_attr:-'none'}
#   tmux setw -g window-status-last-style "fg=$tmux_conf_theme_window_status_last_fg,bg=$tmux_conf_theme_window_status_last_bg,$tmux_conf_theme_window_status_last_attr"
#
#   # -- indicators
#
#   tmux_conf_theme_pairing=${tmux_conf_theme_pairing:-'👓'}            # U+1F453
#   tmux_conf_theme_pairing_fg=${tmux_conf_theme_pairing_fg:-'#e4e4e4'} # white
#   tmux_conf_theme_pairing_bg=${tmux_conf_theme_pairing_bg:-'none'}
#   tmux_conf_theme_pairing_attr=${tmux_conf_theme_pairing_attr:-'none'}
#
#   tmux_conf_theme_prefix=${tmux_conf_theme_prefix:-'⌨'}             # U+2328
#   tmux_conf_theme_prefix_fg=${tmux_conf_theme_prefix_fg:-'#e4e4e4'} # white
#   tmux_conf_theme_prefix_bg=${tmux_conf_theme_prefix_bg:-'none'}
#   tmux_conf_theme_prefix_attr=${tmux_conf_theme_prefix_attr:-'none'}
#
#   tmux_conf_theme_root=${tmux_conf_theme_root:-'!'}
#   tmux_conf_theme_root_fg=${tmux_conf_theme_root_fg:-'none'}
#   tmux_conf_theme_root_bg=${tmux_conf_theme_root_bg:-'none'}
#   tmux_conf_theme_root_attr=${tmux_conf_theme_root_attr:-'bold,blink'}
#
#   tmux_conf_theme_synchronized=${tmux_conf_theme_synchronized:-'🔒'}  # U+1F512
#   tmux_conf_theme_synchronized_fg=${tmux_conf_theme_synchronized_fg:-'none'}
#   tmux_conf_theme_synchronized_bg=${tmux_conf_theme_synchronized_bg:-'none'}
#   tmux_conf_theme_synchronized_attr=${tmux_conf_theme_synchronized_attr:-'none'}
#
#   # -- status left style
#
#   tmux_conf_theme_status_left=${tmux_conf_theme_status_left-' ❐ #S '}
#   tmux_conf_theme_status_left_fg=${tmux_conf_theme_status_left_fg:-'#000000,#e4e4e4,#e4e4e4'}  # black, white , white
#   tmux_conf_theme_status_left_bg=${tmux_conf_theme_status_left_bg:-'#ffff00,#ff00af,#00afff'}  # yellow, pink, white blue
#   tmux_conf_theme_status_left_attr=${tmux_conf_theme_status_left_attr:-'bold,none,none'}
#
#   tmux_conf_theme_status_left=$(echo "$tmux_conf_theme_status_left" | sed \
#     -e "s/#{pairing}/#[fg=$tmux_conf_theme_pairing_fg]#[bg=$tmux_conf_theme_pairing_bg]#[$tmux_conf_theme_pairing_attr]#{?session_many_attached,$tmux_conf_theme_pairing,}/g")
#
#   tmux_conf_theme_status_left=$(echo "$tmux_conf_theme_status_left" | sed \
#     -e "s/#{prefix}/#[fg=$tmux_conf_theme_prefix_fg]#[bg=$tmux_conf_theme_prefix_bg]#[$tmux_conf_theme_prefix_attr]#{?client_prefix,$tmux_conf_theme_prefix,}/g")
#
#   tmux_conf_theme_status_left=$(echo "$tmux_conf_theme_status_left" | sed \
#     -e "s%#{root}%#[fg=$tmux_conf_theme_root_fg]#[bg=$tmux_conf_theme_root_bg]#[$tmux_conf_theme_root_attr]#(cut -c3- ~/.tmux.conf | sh -s _root #{pane_tty} #D)#[inherit]%g")
#
#   tmux_conf_theme_status_left=$(echo "$tmux_conf_theme_status_left" | sed \
#     -e "s%#{synchronized}%#[fg=$tmux_conf_theme_synchronized_fg]#[bg=$tmux_conf_theme_synchronized_bg]#[$tmux_conf_theme_synchronized_attr]#{?pane_synchronized,$tmux_conf_theme_synchronized,}%g")
#
#   if [ -n "$tmux_conf_theme_status_left" ]; then
#     status_left=$(awk \
#                       -v fg_="$tmux_conf_theme_status_left_fg" \
#                       -v bg_="$tmux_conf_theme_status_left_bg" \
#                       -v attr_="$tmux_conf_theme_status_left_attr" \
#                       -v mainsep="$tmux_conf_theme_left_separator_main" \
#                       -v subsep="$tmux_conf_theme_left_separator_sub" '
#       function subsplit(s,   l, i, a, r)
#       {
#         l = split(s, a, ",")
#         for (i = 1; i <= l; ++i)
#         {
#           o = split(a[i], _, "(") - 1
#           c = split(a[i], _, ")") - 1
#           open += o - c
#           o_ = split(a[i], _, "{") - 1
#           c_ = split(a[i], _, "}") - 1
#           open_ += o_ - c_
#           o__ = split(a[i], _, "[") - 1
#           c__ = split(a[i], _, "]") - 1
#           open__ += o__ - c__
#
#           if (i == l)
#             r = sprintf("%s%s", r, a[i])
#           else if (open || open_ || open__)
#             r = sprintf("%s%s,", r, a[i])
#           else
#             r = sprintf("%s%s#[fg=%s,bg=%s,%s]%s", r, a[i], fg[j], bg[j], attr[j], subsep)
#         }
#
#         gsub(/#\[inherit\]/, sprintf("#[default]#[fg=%s,bg=%s,%s]", fg[j], bg[j], attr[j]), r)
#         return r
#       }
#       BEGIN {
#         FS = "|"
#         l1 = split(fg_, fg, ",")
#         l2 = split(bg_, bg, ",")
#         l3 = split(attr_, attr, ",")
#         l = l1 < l2 ? (l1 < l3 ? l1 : l3) : (l2 < l3 ? l2 : l3)
#       }
#       {
#         for (i = j = 1; i <= NF; ++i)
#         {
#           if (open || open_ || open__)
#             printf "|%s", subsplit($i)
#           else
#           {
#             if (i > 1)
#               printf "#[fg=%s,bg=%s,none]%s#[fg=%s,bg=%s,%s]%s", bg[j_], bg[j], mainsep, fg[j], bg[j], attr[j], subsplit($i)
#             else
#               printf "#[fg=%s,bg=%s,%s]%s", fg[j], bg[j], attr[j], subsplit($i)
#           }
#
#           if (!open && !open_ && !open__)
#           {
#             j_ = j
#             j = j % l + 1
#           }
#         }
#         printf "#[fg=%s,bg=%s,none]%s", bg[j_], "default", mainsep
#       }' << EOF
# $tmux_conf_theme_status_left
# EOF
#     )
#   fi
#
#   status_left="$status_left "
#
#   # -- status right style
#
#   tmux_conf_theme_status_right=${tmux_conf_theme_status_right-'#{pairing}#{prefix} #{battery_status} #{battery_bar} #{battery_percentage} , %R , %d %b | #{username} | #{hostname} '}
#   tmux_conf_theme_status_right_fg=${tmux_conf_theme_status_right_fg:-'#8a8a8a,#e4e4e4,#000000'} # light gray, white, black
#   tmux_conf_theme_status_right_bg=${tmux_conf_theme_status_right_bg:-'#080808,#d70000,#e4e4e4'} # dark gray, red, white
#   tmux_conf_theme_status_right_attr=${tmux_conf_theme_status_right_attr:-'none,none,bold'}
#
#   tmux_conf_theme_status_right=$(echo "$tmux_conf_theme_status_right" | sed \
#     -e "s/#{pairing}/#[fg=$tmux_conf_theme_pairing_fg]#[bg=$tmux_conf_theme_pairing_bg]#[$tmux_conf_theme_pairing_attr]#{?session_many_attached,$tmux_conf_theme_pairing,}/g")
#
#   tmux_conf_theme_status_right=$(echo "$tmux_conf_theme_status_right" | sed \
#     -e "s/#{prefix}/#[fg=$tmux_conf_theme_prefix_fg]#[bg=$tmux_conf_theme_prefix_bg]#[$tmux_conf_theme_prefix_attr]#{?client_prefix,$tmux_conf_theme_prefix,}/g")
#
#   tmux_conf_theme_status_right=$(echo "$tmux_conf_theme_status_right" | sed \
#     -e "s%#{root}%#[fg=$tmux_conf_theme_root_fg]#[bg=$tmux_conf_theme_root_bg]#[$tmux_conf_theme_root_attr]#(cut -c3- ~/.tmux.conf | sh -s _root #{pane_tty} #D)#[inherit]%g")
#
#   tmux_conf_theme_status_right=$(echo "$tmux_conf_theme_status_right" | sed \
#     -e "s%#{synchronized}%#[fg=$tmux_conf_theme_synchronized_fg]#[bg=$tmux_conf_theme_synchronized_bg]#[$tmux_conf_theme_synchronized_attr]#{?pane_synchronized,$tmux_conf_theme_synchronized,}%g")
#
#   if [ -n "$tmux_conf_theme_status_right" ]; then
#     status_right=$(awk \
#                       -v fg_="$tmux_conf_theme_status_right_fg" \
#                       -v bg_="$tmux_conf_theme_status_right_bg" \
#                       -v attr_="$tmux_conf_theme_status_right_attr" \
#                       -v mainsep="$tmux_conf_theme_right_separator_main" \
#                       -v subsep="$tmux_conf_theme_right_separator_sub" '
#       function subsplit(s,   l, i, a, r)
#       {
#         l = split(s, a, ",")
#         for (i = 1; i <= l; ++i)
#         {
#           o = split(a[i], _, "(") - 1
#           c = split(a[i], _, ")") - 1
#           open += o - c
#           o_ = split(a[i], _, "{") - 1
#           c_ = split(a[i], _, "}") - 1
#           open_ += o_ - c_
#           o__ = split(a[i], _, "[") - 1
#           c__ = split(a[i], _, "]") - 1
#           open__ += o__ - c__
#
#           if (i == l)
#             r = sprintf("%s%s", r, a[i])
#           else if (open || open_ || open__)
#             r = sprintf("%s%s,", r, a[i])
#           else
#             r = sprintf("%s%s#[fg=%s,bg=%s,%s]%s", r, a[i], fg[j], bg[j], attr[j], subsep)
#         }
#
#         gsub(/#\[inherit\]/, sprintf("#[default]#[fg=%s,bg=%s,%s]", fg[j], bg[j], attr[j]), r)
#         return r
#       }
#       BEGIN {
#         FS = "|"
#         l1 = split(fg_, fg, ",")
#         l2 = split(bg_, bg, ",")
#         l3 = split(attr_, attr, ",")
#         l = l1 < l2 ? (l1 < l3 ? l1 : l3) : (l2 < l3 ? l2 : l3)
#       }
#       {
#         for (i = j = 1; i <= NF; ++i)
#         {
#           if (open_ || open || open__)
#             printf "|%s", subsplit($i)
#           else
#             printf "#[fg=%s,bg=%s,none]%s#[fg=%s,bg=%s,%s]%s", bg[j], (i == 1) ? "default" : bg[j_], mainsep, fg[j], bg[j], attr[j], subsplit($i)
#
#           if (!open && !open_ && !open__)
#           {
#             j_ = j
#             j = j % l + 1
#           }
#         }
#       }' << EOF
# $tmux_conf_theme_status_right
# EOF
#     )
#   fi
#
#   # -- variables
#
#   tmux set -g '@root' "$tmux_conf_theme_root"
#
#   case "$status_left $status_right" in
#     *'#{username}'*|*'#{hostname}'*|*'#{username_ssh}'*|*'#{hostname_ssh}'*)
#       status_left=$(echo "$status_left" | sed \
#         -e 's%#{username}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_tty} false #D)%g' \
#         -e 's%#{hostname}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_tty} false #D)%g' \
#         -e 's%#{username_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_tty} true #D)%g' \
#         -e 's%#{hostname_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_tty} true #D)%g')
#       status_right=$(echo "$status_right" | sed \
#         -e 's%#{username}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_tty} false #D)%g' \
#         -e 's%#{hostname}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_tty} false #D)%g' \
#         -e 's%#{username_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_tty} true #D)%g' \
#         -e 's%#{hostname_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_tty} true #D)%g')
#       ;;
#   esac
#
#   case "$status_left $status_right" in
#     *'#{loadavg}'*)
#       status_left=$(echo "$status_left" | sed -E \
#         -e 's/#\{(\?)?loadavg/#\{\1@loadavg/g')
#       status_right=$(echo "$status_right" | sed -E \
#         -e 's/#\{(\?)?loadavg/#\{\1@loadavg/g')
#       status_right="#(cut -c3- ~/.tmux.conf | sh -s _loadavg)$status_right"
#       ;;
#   esac
#
#   tmux  set -g status-left-length 1000 \; set -g status-left "$(_decode_unicode_escapes "$status_left")" \;\
#         set -g status-right-length 1000 \; set -g status-right "$(_decode_unicode_escapes "$status_right")"
#
#   # -- clock -------------------------------------------------------------
#
#   tmux_conf_theme_clock_colour=${tmux_conf_theme_clock_colour:-'#00afff'} # light blue
#   tmux_conf_theme_clock_style=${tmux_conf_theme_clock_style:-'24'}
#   tmux  setw -g clock-mode-colour "$tmux_conf_theme_clock_colour" \;\
#         setw -g clock-mode-style "$tmux_conf_theme_clock_style"
# }
#
# _apply_configuration() {
#
#   if ! command -v perl > /dev/null 2>&1; then
#     tmux run -b 'tmux set display-time 3000 \; display "This configuration requires perl" \; set -u display-time'
#     return
#   fi
#   if ! command -v sed > /dev/null 2>&1; then
#     tmux run -b 'tmux set display-time 3000 \; display "This configuration requires sed" \; set -u display-time'
#     return
#   fi
#   if ! command -v awk > /dev/null 2>&1; then
#     tmux run -b 'tmux set display-time 3000 \; display "This configuration requires awk" \; set -u display-time'
#     return
#   fi
#
#   # see https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard
#   if command -v reattach-to-user-namespace > /dev/null 2>&1; then
#     default_shell="$(tmux show -gv default-shell)"
#     case "$default_shell" in
#       *fish)
#         tmux set -g default-command "reattach-to-user-namespace -l $default_shell"
#         ;;
#       *sh)
#         tmux set -g default-command "exec $default_shell... 2> /dev/null & reattach-to-user-namespace -l $default_shell"
#         ;;
#     esac
#   fi
#
#   _apply_overrides
#   _apply_bindings
#   _apply_theme
#   for name in $(printenv | grep -E -o '^tmux_conf_[^=]+'); do tmux setenv -gu "$name"; done;
# }
#
# "$@"
