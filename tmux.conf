# cat << EOF > /dev/null

# General {{{

# Set default terminal to tmux-256color for better color support
set -g default-terminal "tmux-256color"

# Enable xterm keys for better key-mapping compatibility
setw -g xterm-keys on

# Set the escape delay time to 0
set -s escape-time 0

# Set the time in milliseconds for which a key press is considered a repeat
set -sg repeat-time 600

# Enable focus event tracking
set -s focus-events on

# Unbind the default prefix key (Control-B)
unbind C-b

# Set the primary prefix key to Control-A
set -g prefix C-a

# Increase scrollback history to 50000
set -g history-limit 50000

# Shortcut to edit tmux configuration and reload it
bind e new-window -n "~/.tmux.conf.local" "sh -c '\${EDITOR:-vim} ~/.tmux.conf.local && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\"'"

bind R source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'

# }}}

# Theme {{{

setw -g window-style "fg=default,bg=default"
setw -g window-active-style "fg=default,bg=default"

setw -g pane-border-style "fg=#686868,bg=default"
set -g pane-active-border-style "fg=#686868,bg=default"

set -g display-panes-colour "#00afff"
set -g display-panes-active-colour "#00afff"

# Status line style
set -g message-style "fg=#000000,bg=#ffff00,bold"

# Status line command style (<prefix> : Escape)
set -g message-command-style "fg=#ffff00,bg=#000000,bold"

# Window modes style
setw -g mode-style "fg=default,bg=#4F5B67,none"

# Status line style
set -g status-style "fg=#f1f1f0,bg=default,none"
set -g status-left-style "fg=#f1f1f0,bg=default,none"
set -g status-right-style "fg=#f1f1f0,bg=default,none"

# Terminal title
set -g set-titles-string '⌘ #S - #I #W'

# Window status style
setw -g window-status-style "fg=#f1f1f0,bg=default,none"
setw -g window-status-format "#I #W"

# Window current status style
setw -g window-status-current-style "fg=#5af78e,bg=default,bold"
setw -g window-status-current-format "#I #W"

# Window activity status style
setw -g window-status-activity-style "fg=default,bg=default,underscore"

# Window bell status style
setw -g window-status-bell-style "fg=#ffff00,bg=default,blink,bold"

# Window last status style
setw -g window-status-last-style "fg=#00afff,bg=default,none"

# }}}

# Display {{{

# Start window and pane numbering at 1 instead of default 0
set -g base-index 1
setw -g pane-base-index 1

# Enable automatic window renaming based on running application
setw -g automatic-rename on

# Enable renumbering of windows when a window is closed
set -g renumber-windows on

# Allow tmux to set the terminal window title
set -g set-titles on

# Set the time panes are displayed after the display-panes command
set -g display-panes-time 800

# Set duration for displaying messages
set -g display-time 4000

# Set the status line update interval in seconds
set -g status-interval 5

# Clear history with Control-L
bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

# Monitor for activity in windows, displaying a visual indicator in the status line
set -g monitor-activity on

# Disable visual bell on activity
set -g visual-activity off

# }}}

# Navigation {{{

# Shortcut to create a new session
bind C new-session

# Shortcut to find and switch to a session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# Window navigation shortcuts
unbind n
unbind p

bind r respawn-pane -k
bind X kill-session
bind x kill-pane
bind n next-window
bind N previous-window

# }}}

# Copy mode {{{

# Enter copy mode and begin selection with <prefix> v
bind v copy-mode \; send -X begin-selection

# Enter copy mode and begin rectangle selection with <prefix> C-v
bind C-v copy-mode \; send -X begin-selection \; send -X rectangle-toggle

# Enter copy mode and begin line selection with <prefix> V
bind V copy-mode \; send -X begin-selection \; send -X select-line

# Copy to macOS clipboard
# Checks if 'pbcopy' is available and sets the key binding for copying in tmux.
if-shell "command -v pbcopy >/dev/null 2>&1" {
  bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'pbcopy'
}

# Copy to X11 clipboard (Linux)
# First checks for 'xsel', then 'xclip' as the clipboard utility.
if-shell "command -v xsel >/dev/null 2>&1" {
  bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xsel -i -b'
} {
  if-shell "command -v xclip >/dev/null 2>&1" {
    bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -i -selection clipboard > /dev/null 2>&1'
  }
}

# Copy to Windows clipboard
# Checks if 'clip.exe' is available (typically for WSL) and sets the key binding.
if-shell "command -v clip.exe >/dev/null 2>&1" {
  bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'clip.exe'
}
# Checks for the presence of '/dev/clipboard' which is used in some Unix systems.
if-shell "[ -c /dev/clipboard ]" {
  bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'cat > /dev/clipboard'
}

# }}}

# Buffers {{{

# List paste buffers
bind b list-buffers

# Paste from the top paste buffer
bind p paste-buffer

# Choose which buffer to paste from
bind P choose-buffer

# }}}

# User overrides {{{

if '[ -f ~/.tmux.conf.local ]' 'source ~/.tmux.conf.local'

# }}}

# Tmux mode indicator {{{

# prompt to display when tmux prefix key is pressed
set -g @mode_indicator_prefix_prompt ' WAIT '

# prompt to display when tmux is in copy mode
set -g @mode_indicator_copy_prompt ' COPY '

# prompt to display when tmux has synchronized panes
set -g @mode_indicator_sync_prompt ' SYNC '

# prompt to display when tmux is in normal mode
set -g @mode_indicator_empty_prompt ' TMUX '

# style values for prefix prompt
set -g @mode_indicator_prefix_mode_style 'bg=blue,fg=black'

# style values for copy prompt
set -g @mode_indicator_copy_mode_style 'bg=yellow,fg=black'

# style values for sync prompt
set -g @mode_indicator_sync_mode_style 'bg=red,fg=black'

# style values for empty prompt
set -g @mode_indicator_empty_mode_style 'bg=cyan,fg=black'

# }}}

# 8< {{{

run 'cut -c3- ~/.tmux.conf | sh -s _apply_configuration'

# }}}

# TMUX plugin manager {{{
# examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-pain-control'
set -g @plugin 'MunifTanjim/tmux-mode-indicator'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.config/tmux/plugins/tpm/tpm'

# }}}

# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# unset GREP_OPTIONS
# export LC_NUMERIC=C
#
# _decode_unicode_escapes() {
#   printf '%s' "$*" | perl -CS -pe 's/(\\u([0-9A-Fa-f]{1,4})|\\U([0-9A-Fa-f]{1,8}))/chr(hex($2.$3))/eg' 2>/dev/null
# }
#
#
# _apply_theme() {

#   # -- status left style
#
#   tmux_conf_theme_status_left=${tmux_conf_theme_status_left-' ❐ #S '}
#   tmux_conf_theme_status_left_fg=${tmux_conf_theme_status_left_fg:-'#000000,#e4e4e4,#e4e4e4'}  # black, white , white
#   tmux_conf_theme_status_left_bg=${tmux_conf_theme_status_left_bg:-'#ffff00,#ff00af,#00afff'}  # yellow, pink, white blue
#   tmux_conf_theme_status_left_attr=${tmux_conf_theme_status_left_attr:-'bold,none,none'}
#
#   if [ -n "$tmux_conf_theme_status_left" ]; then
#     status_left=$(awk \
#                       -v fg_="$tmux_conf_theme_status_left_fg" \
#                       -v bg_="$tmux_conf_theme_status_left_bg" \
#                       -v attr_="$tmux_conf_theme_status_left_attr" \
#                       -v mainsep="$tmux_conf_theme_left_separator_main" \
#                       -v subsep="$tmux_conf_theme_left_separator_sub" '
#       function subsplit(s,   l, i, a, r)
#       {
#         l = split(s, a, ",")
#         for (i = 1; i <= l; ++i)
#         {
#           o = split(a[i], _, "(") - 1
#           c = split(a[i], _, ")") - 1
#           open += o - c
#           o_ = split(a[i], _, "{") - 1
#           c_ = split(a[i], _, "}") - 1
#           open_ += o_ - c_
#           o__ = split(a[i], _, "[") - 1
#           c__ = split(a[i], _, "]") - 1
#           open__ += o__ - c__
#
#           if (i == l)
#             r = sprintf("%s%s", r, a[i])
#           else if (open || open_ || open__)
#             r = sprintf("%s%s,", r, a[i])
#           else
#             r = sprintf("%s%s#[fg=%s,bg=%s,%s]%s", r, a[i], fg[j], bg[j], attr[j], subsep)
#         }
#
#         gsub(/#\[inherit\]/, sprintf("#[default]#[fg=%s,bg=%s,%s]", fg[j], bg[j], attr[j]), r)
#         return r
#       }
#       BEGIN {
#         FS = "|"
#         l1 = split(fg_, fg, ",")
#         l2 = split(bg_, bg, ",")
#         l3 = split(attr_, attr, ",")
#         l = l1 < l2 ? (l1 < l3 ? l1 : l3) : (l2 < l3 ? l2 : l3)
#       }
#       {
#         for (i = j = 1; i <= NF; ++i)
#         {
#           if (open || open_ || open__)
#             printf "|%s", subsplit($i)
#           else
#           {
#             if (i > 1)
#               printf "#[fg=%s,bg=%s,none]%s#[fg=%s,bg=%s,%s]%s", bg[j_], bg[j], mainsep, fg[j], bg[j], attr[j], subsplit($i)
#             else
#               printf "#[fg=%s,bg=%s,%s]%s", fg[j], bg[j], attr[j], subsplit($i)
#           }
#
#           if (!open && !open_ && !open__)
#           {
#             j_ = j
#             j = j % l + 1
#           }
#         }
#         printf "#[fg=%s,bg=%s,none]%s", bg[j_], "default", mainsep
#       }' << EOF
# $tmux_conf_theme_status_left
# EOF
#     )
#   fi
#
#   status_left="$status_left "
#
#   # -- status right style
#
#   tmux_conf_theme_status_right=${tmux_conf_theme_status_right-'#{battery_status} #{battery_bar} #{battery_percentage} , %R , %d %b | #{username} | #{hostname} '}
#   tmux_conf_theme_status_right_fg=${tmux_conf_theme_status_right_fg:-'#8a8a8a,#e4e4e4,#000000'} # light gray, white, black
#   tmux_conf_theme_status_right_bg=${tmux_conf_theme_status_right_bg:-'#080808,#d70000,#e4e4e4'} # dark gray, red, white
#   tmux_conf_theme_status_right_attr=${tmux_conf_theme_status_right_attr:-'none,none,bold'}
#
#   if [ -n "$tmux_conf_theme_status_right" ]; then
#     status_right=$(awk \
#                       -v fg_="$tmux_conf_theme_status_right_fg" \
#                       -v bg_="$tmux_conf_theme_status_right_bg" \
#                       -v attr_="$tmux_conf_theme_status_right_attr" \
#                       -v mainsep="$tmux_conf_theme_right_separator_main" \
#                       -v subsep="$tmux_conf_theme_right_separator_sub" '
#       function subsplit(s,   l, i, a, r)
#       {
#         l = split(s, a, ",")
#         for (i = 1; i <= l; ++i)
#         {
#           o = split(a[i], _, "(") - 1
#           c = split(a[i], _, ")") - 1
#           open += o - c
#           o_ = split(a[i], _, "{") - 1
#           c_ = split(a[i], _, "}") - 1
#           open_ += o_ - c_
#           o__ = split(a[i], _, "[") - 1
#           c__ = split(a[i], _, "]") - 1
#           open__ += o__ - c__
#
#           if (i == l)
#             r = sprintf("%s%s", r, a[i])
#           else if (open || open_ || open__)
#             r = sprintf("%s%s,", r, a[i])
#           else
#             r = sprintf("%s%s#[fg=%s,bg=%s,%s]%s", r, a[i], fg[j], bg[j], attr[j], subsep)
#         }
#
#         gsub(/#\[inherit\]/, sprintf("#[default]#[fg=%s,bg=%s,%s]", fg[j], bg[j], attr[j]), r)
#         return r
#       }
#       BEGIN {
#         FS = "|"
#         l1 = split(fg_, fg, ",")
#         l2 = split(bg_, bg, ",")
#         l3 = split(attr_, attr, ",")
#         l = l1 < l2 ? (l1 < l3 ? l1 : l3) : (l2 < l3 ? l2 : l3)
#       }
#       {
#         for (i = j = 1; i <= NF; ++i)
#         {
#           if (open_ || open || open__)
#             printf "|%s", subsplit($i)
#           else
#             printf "#[fg=%s,bg=%s,none]%s#[fg=%s,bg=%s,%s]%s", bg[j], (i == 1) ? "default" : bg[j_], mainsep, fg[j], bg[j], attr[j], subsplit($i)
#
#           if (!open && !open_ && !open__)
#           {
#             j_ = j
#             j = j % l + 1
#           }
#         }
#       }' << EOF
# $tmux_conf_theme_status_right
# EOF
#     )
#   fi
#
#   # -- variables
#
#   tmux  set -g status-left-length 1000 \; set -g status-left "$(_decode_unicode_escapes "$status_left")" \;\
#         set -g status-right-length 1000 \; set -g status-right "$(_decode_unicode_escapes "$status_right")"
# }
#
# _apply_configuration() {
#   _apply_theme
#   for name in $(printenv | grep -E -o '^tmux_conf_[^=]+'); do tmux setenv -gu "$name"; done;
# }
#
# "$@"
